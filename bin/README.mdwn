# Tools Index

## Desktop Tools

### `alluni.pl`

Prints all unicode characters (by name.)

### `armstrong`

Reminder to stretch every 25m.

### `bible-handler`

Handles `bible://` links.

### `bugzid-handler`

Handles `bugzid:` links.

### `mid-handler`

Handles `mid:` links.

### `vim-help`

Handles `vim:` links.

### `rt-handler`

Handles `rt:` links.

### `file-manager`

Runs my choice of file manager.

### `lock-now`

Runs screen locker.

### `scenery`

Randomly show a different background from the `~/Dropbox/Pictures/wallpaper`
directory, every 25 minutes.

### `showdm`

Show menu of programs to run (eg `firefox`.)

### `showsession`

Show menu of vim sessions to resume.

### `showuni`

Show menu of unicode characters (by name) and stores selection into
`~/.uni_history`.

### `type-clipboard`

Some websites block paste; this types whats in the clipboard directly to bypass
that.

### `xdg-open`

Fork of `xdg-open` that adds support for `Terminal=true` support.

### `xdg-terminal`

Terminal wrapper run by the above.

## Docker Tools

### `docker-pidof`

Print the pid of the root of a given container.

### `docker-pstree`

Print the `pstree` of the passed container.

### `docker-root-pids`

Print the root pids of the passed container.

### `sv-run-offlineimap`

Run offlineimap container.

### `sv-run-w.pl`

Run w.pl container.

### `sv-tail-offlineimap`

Tail offlineimap container.

### `sv-tail-w.pl`

Tail w.pl container.

## Docker Wrappers

### `aws`

Run "anonoymous" aws container.

### `goobook`

Run "anonoymous" goobook container.

### `hq`

Run "anonoymous" hq container.

### `hugo`

Run "anonoymous" hugo container.

### `jpterm`

Run "anonoymous" jpterm container.

## Generic Wrappers

### `wrap-tar`

Wraps tar to encourage me to not use muscle memory for longer command flags.

### `vim`

Wraps vim to create more advanced sessions.

### `xsel`

Wraps `xsel` to pick a more sensible default copy buffer.

## Git Tools

### `git-amend-file-split`

Splits most recent commit into a separate commit per file.

### `git-fixup-assigner.pl`

Commits all changes as fixups to the most recent commit for that hunk.

### `git-remote-bzr`

```
git clone bzr::https://...
```

### `git-remote-hg`

```
git clone hg::https://hg.python.org/cpython/
```

### `git-revert-whitespace-changes`

Remove whitespace only changes from the current checkout.

### `wrap-git`

A number of additional features added to core git via simple wrapper:

 1. Prompts when committing all when files are staged.
 2. Disallows tracking when branching off `origin/{release,master}`
 3. Defaults `git pull` to `--ff-only`
 4. Forces `-xdff` to be spelled `-xdfff`
 5. Defaults name of new remotes to `origin`

## Mail Tools

### `addrdedup`

Deduplicates addresses based on the mutt address format.

### `addrlookup-fast`

Simple wrapper around `grep` to quickly search a preformatted address file.

### `copy-url`

Copy urls from emails.  Rarely used; flakey?

### `extract_url.pl`

Same as above, but not written by me.

### `email-fix-in-reply-to`

Weird cronjob to munge In-Reply-To headers so that certain emails with thread
better.  Should be ported to AppScript.

### `mail-picture`

Creates resized copies of all passed filenames to `1024x768` and initiates a new
email containing them via mutt.

### `mutt`

neomutt wrapper that specifies my personal mailbox.

### `postqueue-checker` / `postqueue-notify`

Tool that notifies my via desktop notifications if email is stuck in queue.

### `sync-addresses`

Creates fresh mutt address file using
[goobook](https://pypi.python.org/pypi/goobook/1.9) and `addrlookup`.

### `top-post`

An attempt at generically trimming emails for brief responses.  Currently unused
and flakey.

### `unsubscribe`

Takes a full email on stdin and uses the List-Unsubscribe header.  Directly
calls firefox for http links, runs a new mutt in tmux for mailto links.

### `zr-mutt`

neomutt wrapper that specifies my zr mailbox.

## Misc Tools

### `ascii-ify`

Silly filter that removes all non-ASCII characters, and replaces a couple UTF-8
characters with ascii versions.

### `calc`

Simple wrapper around `bc` that merges tokens and replaces `x` with `*`.

### `clock`

Shows unicode clock of current time.

### `czail`

Tool to `tail` `tsar` logs.  This is relatively ZR specific but the code is
basic and clear.

### `diff-hunk-list`

Tool to assist in [iterating over chunks of a diff in
vim](https://blog.afoolishmanifesto.com/posts/iterating-over-chunks-of-a-diff-in-vim/).

### `dog`

Like `cat`, but better; works with directories too.

### `ec2-find-by-name`

Takes name of an ec2 instance and produces the relevant instance id.

### `evince`

Wraps the normal evince but removes my `TMPDIR` override, which evince gets
confused by.

### `fressh`

Tool to automatically push my dotfiles to a server before ssh'ing in.

### `fx`

Firefox wrapper that reads from standard in instead of requiring a filename.

### `get-kernel-mailine.pl`

Downloads the specified mainline kernel, built by ubuntu.

### `gg`

Shortcut for git-grep.

### `hgrep`

`grep` for csv, without messing up the header line.

### `hsort`

`sort` for csv, without messing up the header line.

### `mc`

Filter to make output monochrome.

### `netrc-password`

```
netrc-password imap.gmail.com foo@example.com
```

Gets a password from your netrc file.  (Login is optional.)

### `older-than`

Exits 1 if the passed file is older than the age spec.  Mostly used to turn
hourly cronjobs into daily cronjobs.

### `override-hosts`

```
env 'HOST_OVERIDE_www.ziprecruiter.com=www.ziprecruiter-frew.com \
   override-hosts perl -E'say gethostbyname("gmail.com")'
```

An attempt to allow overriding hosts at runtime.  Currently unused and flakey.

### `paste_edit`

Creates a temporary file containing the contents of the copy buffer, allows the
user to edit it with gvim, and the submits the contents to a pastebin via
[nopaste](https://metacpan.org/pod/App::Nopaste).

### `perl-browse`

Pass a module name (eg `File::Find`) and shows it in vim.  To browse as if you
were in a web browser, press `gf` over other modules (like `File::Basename`) and
to go back press `CTRL-O`.

### `plain`

Strips formatting from any text in the copy buffer.

### `rand`

Prints an integer from 1 to the passed integer.

### `restarter`

```
restarter my-web-server
```

Weird program I am not sure I ever used that simply runs a child process and
restarts it any time a new line comes in over STDIN.

### `rss`

```
rss raw subscribeToFeed feed_url https://lcamtuf.blogspot.com/feeds/posts/default category_id 3
```

Super basic CLI API to [TinyTinyRSS](https://tt-rss.org/).

### `screen-res`

```
screen-res
```

Prints the screen resolution.

### `screenshot-to-text`

```
screenshot-to-text
```

Take a screenshot of some amount of text (with `flameshot` or `shutter`, for
example) then run this to put an OCR'd version of the image in the text copy
buffer.  For best results make text of size 16 or higher.

### `shrug`

Puts `¯\_(ツ)_/¯` in copy buffer.

### `skip`

```
$ perl -E'say for 1..10' | skip 9
10
```

Skips the passed amount of lines.

### `store-hist`

```
echo -n "foo" | store-hist ~/.history
```

Basically `tee -a` but only writes a single line and always adds a newline.

### `where-dem-big-files-at`

Tool to automate finding big files in a given directory.  Ensures that sort is
fast and doesn't spill to the (presumably full) disk.

### `zrdate`

Prints current date in the zr format (YYYYMMDD.)

## Perl Tools

### `abc`

```
$ abc LWP::UserAgent '$ua = A->new; say length $ua->get("http://google.com")->content'
```

Runs passed perl script, with the leading tokens being loaded and aliased as
`A`, `B`, `C`, etc.

### `compile-mkit`

```
compile-mkit ./mkit/password-reset '{ username frew link http://test }'
```

Compile and render an mkit to STDOUT.  Takes path of mkit and [JSONY
doc](https://metacpan.org/pod/distribution/JSONY/lib/JSONY.pod) as the data.
