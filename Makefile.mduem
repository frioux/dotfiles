# Makefile.mduem is just a "library" Makefile.  It doesn't nothing by itself.
# Note that this Makefile requires GNU make.
# Coding Rules  #{{{1
#
# - Use UPPER_CASE variables to be configured by user.
#
# - Use lower_case variables for internal use of mduem.








# Common  #{{{1

SHELL=/bin/bash








# all  #{{{1

.PHONY: all
all: build








# build  #{{{1

TARGETS_ARCHIVED ?= $(shell git ls-files)
TARGETS_GENERATED ?=# Empty
TARGETS_STATIC ?=# Empty

targets_all_archived = $(sort $(targets_all_installed) $(TARGETS_ARCHIVED))
targets_all_installed = $(TARGETS_GENERATED) $(TARGETS_STATIC)




.PHONY: build
build: $(targets_all_installed)








# clean  #{{{1

.PHONY: clean
clean: clean-generated clean-junks

.PHONY: clean-generated
clean-generated:
	rm -rf $(TARGETS_GENERATED)

.PHONY: clean-junks
clean-junks:
	find -name '*~' -or -name ',*' | xargs rm -rf








# install  #{{{1

INSTALL_DIR ?=# Empty
ifeq '$(strip $(INSTALL_DIR))' ''
$(error Please set INSTALL_DIR)
endif

RENAME_TARGET ?= $(patsubst %,$(INSTALL_DIR)/%,$(1))




.PHONY: install
install: build




define rule_to_install_a_target  # (build_target, install_target)
install: $(2)
$(2): $(1)
	@echo 'INSTALL $(1) ==> $(2)'
	@mkdir -p '$(dir $(2))'
	@cp '$(1)' '$(2)'

endef
$(eval \
  $(foreach t, \
    $(targets_all_installed), \
    $(call rule_to_install_a_target,$(t),$(call RENAME_TARGET,$(t)))))








# pack  #{{{1

archive_basename = $(repository_name)-$(version)
archive_name = $(archive_basename).zip
repository_name = $(notdir $(shell pwd))
version = $(shell git describe --tags --always)


.PHONY: pack
pack:
	rm -rf '$(archive_basename)' '$(archive_name)'
	$(MAKE) \
	  'INSTALL_DIR=$(archive_basename)' \
	  'targets_all_installed=$(targets_all_archived)' \
	  install
	zip -r $(archive_name) $(archive_basename)/
	rm -rf '$(archive_basename)'








# release  #{{{1

.PHONY: release
release:
	@echo 'FIXME: NIY'








# test  #{{{1

test_cases := $(patsubst %.expected,%, \
                $(shell git ls-files test/ | grep '\.expected$$'))




.PHONY: test
test: test/,ok

test/,ok: $(test_cases:test/%=test/,%.ok)
	@echo 'ALL TESTS PASSED.'
	@touch $@

test/,%.ok: test/,%.diff
	@echo -n 'TEST: $< ... '
	@if ! [ -s test/,%.diff ]; then \
	   echo 'OK'; \
	 else \
	   echo 'FAILED'; \
	   cat $<; \
	   echo 'END'; \
	   false; \
	 fi
	@touch $@

test/,%.diff: test/%.expected test/,%.output
	-@diff -u $^ >$@

test/,%.output: test/%.input








# __END__  #{{{1
# vim: foldmethod=marker
